#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 4, 19, 14, 28, 29, 1)

__all__ = [
    'ACLParser',
    'ACLSemantics',
    'main'
]

KEYWORDS = set([])


class ACLParser(Parser):
    def __init__(self,
                 whitespace=re.compile('[\\t ]+', RE_FLAGS | re.DOTALL),
                 nameguard=None,
                 comments_re='\\s*#.*',
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(ACLParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _START_(self):
        self._eol_()

        def block0():
            self._header_()
            self._eol_()
            self._terms_()
            self._eol_()
        self._positive_closure(block0)
        self._check_eof()

    @graken()
    def _delim_(self):
        self._token('::')

    @graken()
    def _openbracket_(self):
        self._token('{')

    @graken()
    def _closebracket_(self):
        self._token('}')

    @graken()
    def _header_(self):
        self._token('header')
        self._openbracket_()
        self._eol_()
        self._header_spec_()
        self.name_last_node('attributes')
        self._closebracket_()
        self._eol_()

        self.ast._define(
            ['attributes'],
            []
        )

    @graken()
    def _eol_(self):
        self._pattern(r'(\r?\n|\r)*')

    @graken()
    def _header_spec_(self):

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._target_spec_()
                    with self._option():
                        self._comment_spec_()
                    with self._option():
                        self._eol_()
                    self._error('no available options')
        self._positive_closure(block0)

    @graken()
    def _target_spec_(self):
        self._token('target')
        self._delim_()

        def block0():
            with self._choice():
                with self._option():
                    self._string_()
                with self._option():
                    self._integer_()
                self._error('no available options')
        self._positive_closure(block0)

    @graken()
    def _comment_spec_(self):
        self._token('comment')
        self._delim_()
        self._dblquotedstring_()
        self.name_last_node('comment')

        self.ast._define(
            ['comment'],
            []
        )

    @graken()
    def _dblquotedstring_(self):
        self._pattern(r'"[^"].*?"')

    @graken()
    def _integer_(self):
        self._pattern(r'\d+')

    @graken()
    def _string_(self):
        self._pattern(r'\w+([-_+.@/]\w*)*')

    @graken()
    def _terms_(self):

        def block0():
            self._term_()
        self._positive_closure(block0)

    @graken()
    def _term_(self):
        self._token('term')
        self._string_()
        self.name_last_node('name')
        self._openbracket_()
        self._eol_()

        def block2():
            self._termattributes_()
        self._positive_closure(block2)
        self.add_last_node_to_name('attributes')
        self._closebracket_()
        self._eol_()

        self.ast._define(
            ['name'],
            ['attributes']
        )

    @graken()
    def _termattributes_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._term_spec_()
                with self._option():
                    self._eol_()
                self._error('no available options')
        self._positive_closure(block0)

    @graken()
    def _term_spec_(self):
        with self._choice():
            with self._option():
                self._action_spec_()
            with self._option():
                self._addr_spec_()
            with self._option():
                self._comment_spec_()
            with self._option():
                self._counter_spec_()
            with self._option():
                self._ether_type_spec_()
            with self._option():
                self._exclude_spec_()
            with self._option():
                self._expiration_spec_()
            with self._option():
                self._fragment_offset_spec_()
            with self._option():
                self._icmp_type_spec_()
            with self._option():
                self._interface_spec_()
            with self._option():
                self._logging_spec_()
            with self._option():
                self._losspriority_spec_()
            with self._option():
                self._option_spec_()
            with self._option():
                self._owner_spec_()
            with self._option():
                self._packet_length_spec_()
            with self._option():
                self._platform_spec_()
            with self._option():
                self._policer_spec_()
            with self._option():
                self._port_spec_()
            with self._option():
                self._precedence_spec_()
            with self._option():
                self._principals_spec_()
            with self._option():
                self._prefix_list_spec_()
            with self._option():
                self._protocol_spec_()
            with self._option():
                self._qos_spec_()
            with self._option():
                self._routinginstance_spec_()
            with self._option():
                self._tag_list_spec_()
            with self._option():
                self._timeout_spec_()
            with self._option():
                self._traffic_type_spec_()
            with self._option():
                self._verbatim_spec_()
            self._error('no available options')

    @graken()
    def _routinginstance_spec_(self):
        self._token('routing-instance')
        self._delim_()
        self._string_()

    @graken()
    def _losspriority_spec_(self):
        self._token('loss-priority')
        self._delim_()
        self._string_()

    @graken()
    def _precedence_spec_(self):
        self._token('precedence')
        self._delim_()

        def block0():
            self._integer_()
        self._positive_closure(block0)

    @graken()
    def _icmp_type_spec_(self):
        self._token('icmp-type')
        self._delim_()

        def block0():
            self._string_()
        self._positive_closure(block0)

    @graken()
    def _packet_length_spec_(self):
        self._token('packet-length')
        self._delim_()
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._integer_()
                        self._token('-')
                        self._integer_()
                with self._option():
                    self._integer_()
                self._error('no available options')

    @graken()
    def _fragment_offset_spec_(self):
        self._token('fragment-offset')
        self._delim_()
        with self._group():
            with self._choice():
                with self._option():
                    self._integer_()
                    self._token('-')
                    self._integer_()
                with self._option():
                    self._integer_()
                self._error('no available options')

    @graken()
    def _exclude_spec_(self):
        with self._choice():
            with self._option():
                self._token('source-exclude')
                self._delim_()

                def block0():
                    self._string_()
                self._positive_closure(block0)
            with self._option():
                self._token('destination-exclude')
                self._delim_()

                def block1():
                    self._string_()
                self._positive_closure(block1)
            with self._option():
                self._token('address-exclude')
                self._delim_()

                def block2():
                    self._string_()
                self._positive_closure(block2)
            with self._option():
                self._token('protocol-except')
                self._delim_()

                def block3():
                    self._string_()
                self._positive_closure(block3)
            self._error('no available options')

    @graken()
    def _prefix_list_spec_(self):
        with self._choice():
            with self._option():
                self._token('destination-prefix')
                self._delim_()

                def block0():
                    self._string_()
                self._positive_closure(block0)
            with self._option():
                self._token('source-prefix')
                self._delim_()

                def block1():
                    self._string_()
                self._positive_closure(block1)
            self._error('no available options')

    @graken()
    def _addr_spec_(self):
        with self._choice():
            with self._option():
                self._token('source-address')
                self._delim_()

                def block0():
                    self._string_()
                self._positive_closure(block0)
            with self._option():
                self._token('destination-address')
                self._delim_()

                def block1():
                    self._string_()
                self._positive_closure(block1)
            with self._option():
                self._token('address')
                self._delim_()

                def block2():
                    self._string_()
                self._positive_closure(block2)
            self._error('no available options')

    @graken()
    def _port_spec_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._token('source-port')
                    self._delim_()

                    def block0():
                        self._string_()
                    self._positive_closure(block0)
            with self._option():
                with self._group():
                    self._token('destination-port')
                    self._delim_()

                    def block1():
                        self._string_()
                    self._positive_closure(block1)
            with self._option():
                with self._group():
                    self._token('port')
                    self._delim_()

                    def block2():
                        self._string_()
                    self._positive_closure(block2)
            self._error('no available options')

    @graken()
    def _protocol_spec_(self):
        self._token('protocol')
        self._delim_()

        def block0():
            with self._choice():
                with self._option():
                    self._string_()
                with self._option():
                    self._integer_()
                self._error('no available options')
        self._positive_closure(block0)

    @graken()
    def _tag_list_spec_(self):
        with self._choice():
            with self._option():
                self._token('destination-tag')
                self._delim_()

                def block0():
                    self._string_()
                self._positive_closure(block0)
            with self._option():
                self._token('source-tag')
                self._delim_()

                def block1():
                    self._string_()
                self._positive_closure(block1)
            self._error('no available options')

    @graken()
    def _ether_type_spec_(self):
        self._token('ether-type')
        self._delim_()

        def block0():
            self._string_()
        self._positive_closure(block0)

    @graken()
    def _traffic_type_spec_(self):
        self._token('traffic-type')
        self._delim_()

        def block0():
            self._string_()
        self._positive_closure(block0)

    @graken()
    def _policer_spec_(self):
        self._token('policer')
        self._delim_()
        self._string_()

    @graken()
    def _logging_spec_(self):
        self._token('logging')
        self._delim_()
        self._string_()

    @graken()
    def _option_spec_(self):
        self._token('option')
        self._delim_()

        def block0():
            self._string_()
        self._positive_closure(block0)

    @graken()
    def _principals_spec_(self):
        self._token('principals')
        self._delim_()

        def block0():
            self._string_()
        self._positive_closure(block0)

    @graken()
    def _action_spec_(self):
        self._token('action')
        self._delim_()
        self._string_()

    @graken()
    def _counter_spec_(self):
        self._token('counter')
        self._delim_()
        self._string_()

    @graken()
    def _expiration_spec_(self):
        self._token('expiration')
        self._delim_()
        self._integer_()
        self._token('-')
        self._integer_()
        self._token('-')
        self._integer_()

    @graken()
    def _owner_spec_(self):
        self._token('owner')
        self._delim_()
        self._string_()

    @graken()
    def _verbatim_spec_(self):
        self._token('verbatim')
        self._delim_()
        self._string_()
        self._dblquotedstring_()

    @graken()
    def _qos_spec_(self):
        self._token('QOS')
        self._delim_()
        self._string_()

    @graken()
    def _interface_spec_(self):
        with self._choice():
            with self._option():
                self._token('source-interface')
                self._delim_()
                self._string_()
            with self._option():
                self._token('destination-interface')
                self._delim_()
                self._string_()
            self._error('no available options')

    @graken()
    def _platform_spec_(self):
        with self._choice():
            with self._option():
                self._token('platform')
                self._delim_()

                def block0():
                    self._string_()
                self._positive_closure(block0)
            with self._option():
                self._token('platform-exclude')
                self._delim_()

                def block1():
                    self._string_()
                self._positive_closure(block1)
            self._error('no available options')

    @graken()
    def _timeout_spec_(self):
        self._token('timeout')
        self._delim_()
        self._integer_()


class ACLSemantics(object):
    def START(self, ast):
        return ast

    def delim(self, ast):
        return ast

    def openbracket(self, ast):
        return ast

    def closebracket(self, ast):
        return ast

    def header(self, ast):
        return ast

    def eol(self, ast):
        return ast

    def header_spec(self, ast):
        return ast

    def target_spec(self, ast):
        return ast

    def comment_spec(self, ast):
        return ast

    def dblquotedstring(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def string(self, ast):
        return ast

    def terms(self, ast):
        return ast

    def term(self, ast):
        return ast

    def termattributes(self, ast):
        return ast

    def term_spec(self, ast):
        return ast

    def routinginstance_spec(self, ast):
        return ast

    def losspriority_spec(self, ast):
        return ast

    def precedence_spec(self, ast):
        return ast

    def icmp_type_spec(self, ast):
        return ast

    def packet_length_spec(self, ast):
        return ast

    def fragment_offset_spec(self, ast):
        return ast

    def exclude_spec(self, ast):
        return ast

    def prefix_list_spec(self, ast):
        return ast

    def addr_spec(self, ast):
        return ast

    def port_spec(self, ast):
        return ast

    def protocol_spec(self, ast):
        return ast

    def tag_list_spec(self, ast):
        return ast

    def ether_type_spec(self, ast):
        return ast

    def traffic_type_spec(self, ast):
        return ast

    def policer_spec(self, ast):
        return ast

    def logging_spec(self, ast):
        return ast

    def option_spec(self, ast):
        return ast

    def principals_spec(self, ast):
        return ast

    def action_spec(self, ast):
        return ast

    def counter_spec(self, ast):
        return ast

    def expiration_spec(self, ast):
        return ast

    def owner_spec(self, ast):
        return ast

    def verbatim_spec(self, ast):
        return ast

    def qos_spec(self, ast):
        return ast

    def interface_spec(self, ast):
        return ast

    def platform_spec(self, ast):
        return ast

    def timeout_spec(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=re.compile('[\\t ]+', RE_FLAGS | re.DOTALL),
        nameguard=None,
        comments_re='\\s*#.*',
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = ACLParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, ACLParser, name='ACL')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
